/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.asnetwork.swig;

public class ASVideoInput extends ASMediaNode {
  private long swigCPtr;

  protected ASVideoInput(long cPtr, boolean cMemoryOwn) {
    super(AS_Native_PlayerJNI.ASVideoInput_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(ASVideoInput obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        AS_Native_PlayerJNI.delete_ASVideoInput(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public int videoOpen(String url, VIDEO_SOURCE srcType) {
    return AS_Native_PlayerJNI.ASVideoInput_videoOpen(swigCPtr, this, url, srcType.swigValue());
  }

  public int videoStart(VideoInputParam para) {
    return AS_Native_PlayerJNI.ASVideoInput_videoStart(swigCPtr, this, VideoInputParam.getCPtr(para), para);
  }

  public int videoStop() {
    return AS_Native_PlayerJNI.ASVideoInput_videoStop(swigCPtr, this);
  }

  public int videoClose() {
    return AS_Native_PlayerJNI.ASVideoInput_videoClose(swigCPtr, this);
  }

  public int packetDataRecv(SWIGTYPE_p_void frame) {
    return AS_Native_PlayerJNI.ASVideoInput_packetDataRecv(swigCPtr, this, SWIGTYPE_p_void.getCPtr(frame));
  }

  public int packetDataSend(SWIGTYPE_p_void frame) {
    return AS_Native_PlayerJNI.ASVideoInput_packetDataSend(swigCPtr, this, SWIGTYPE_p_void.getCPtr(frame));
  }

  public void setEventCB(ASVideoInputEvent eventCB) {
    AS_Native_PlayerJNI.ASVideoInput_setEventCB(swigCPtr, this, ASVideoInputEvent.getCPtr(eventCB), eventCB);
  }

  public void setPEventCB(ASVideoInputEvent value) {
    AS_Native_PlayerJNI.ASVideoInput_pEventCB_set(swigCPtr, this, ASVideoInputEvent.getCPtr(value), value);
  }

  public ASVideoInputEvent getPEventCB() {
    long cPtr = AS_Native_PlayerJNI.ASVideoInput_pEventCB_get(swigCPtr, this);
    return (cPtr == 0) ? null : new ASVideoInputEvent(cPtr, false);
  }

  public void setInnerParam(VideoInputParam value) {
    AS_Native_PlayerJNI.ASVideoInput_innerParam_set(swigCPtr, this, VideoInputParam.getCPtr(value), value);
  }

  public VideoInputParam getInnerParam() {
    long cPtr = AS_Native_PlayerJNI.ASVideoInput_innerParam_get(swigCPtr, this);
    return (cPtr == 0) ? null : new VideoInputParam(cPtr, false);
  }

  public void setIsStart(boolean value) {
    AS_Native_PlayerJNI.ASVideoInput_isStart_set(swigCPtr, this, value);
  }

  public boolean getIsStart() {
    return AS_Native_PlayerJNI.ASVideoInput_isStart_get(swigCPtr, this);
  }

  public void setIsOpen(boolean value) {
    AS_Native_PlayerJNI.ASVideoInput_isOpen_set(swigCPtr, this, value);
  }

  public boolean getIsOpen() {
    return AS_Native_PlayerJNI.ASVideoInput_isOpen_get(swigCPtr, this);
  }

}
