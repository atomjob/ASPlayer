/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Java extensions.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif

namespace Swig {
  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java
       proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else { /* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for 
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
      jenv->DeleteLocalRef(jobj);
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };
}

#endif /* __cplusplus */


namespace Swig {
  namespace {
    jclass jclass_AS_Native_PlayerJNI = NULL;
    jmethodID director_methids[12];
  }
}

#include <string>


typedef unsigned char ucArray;

SWIGINTERN ucArray *new_ucArray(int nelements){
  return new unsigned char[nelements];
}
SWIGINTERN void delete_ucArray(ucArray *self){
  delete [] self;
}
SWIGINTERN unsigned char ucArray_getitem(ucArray *self,int index){
  return self[index];
}
SWIGINTERN void ucArray_setitem(ucArray *self,int index,unsigned char value){
  self[index] = value;
}
SWIGINTERN unsigned char *ucArray_cast(ucArray *self){
  return self;
}
SWIGINTERN ucArray *ucArray_frompointer(unsigned char *t){
  return (ucArray *) t;
}

#include <stdio.h>
#include <libavcodec/avcodec.h>
#include <libavformat/avformat.h>
#include <libswscale/swscale.h>
#include "ASLog.h"
#include "ASVideoInput.h"
#include "ASPlayer.h"
#include "ASMediaFileSource.h"
#include "ASVideoOutput.h"




/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "swig_build_wrap.h"

SwigDirector_ASVideoInputEvent::SwigDirector_ASVideoInputEvent(JNIEnv *jenv) : ASVideoInputEvent(), Swig::Director(jenv) {
}

SwigDirector_ASVideoInputEvent::~SwigDirector_ASVideoInputEvent() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ASVideoInputEvent::videoOpened(VideoInputParam *para) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpara = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ASVideoInputEvent::videoOpened.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((VideoInputParam **)&jpara) = (VideoInputParam *) para; 
    jenv->CallStaticVoidMethod(Swig::jclass_AS_Native_PlayerJNI, Swig::director_methids[0], swigjobj, jpara);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ASVideoInputEvent::videoStarted(VideoInputParam *para) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpara = 0 ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ASVideoInputEvent::videoStarted.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((VideoInputParam **)&jpara) = (VideoInputParam *) para; 
    jenv->CallStaticVoidMethod(Swig::jclass_AS_Native_PlayerJNI, Swig::director_methids[1], swigjobj, jpara);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ASVideoInputEvent::videoStopped(VideoInputParam *para) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpara = 0 ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ASVideoInputEvent::videoStopped.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((VideoInputParam **)&jpara) = (VideoInputParam *) para; 
    jenv->CallStaticVoidMethod(Swig::jclass_AS_Native_PlayerJNI, Swig::director_methids[2], swigjobj, jpara);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ASVideoInputEvent::videoClosed(VideoInputParam *para) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpara = 0 ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ASVideoInputEvent::videoClosed.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((VideoInputParam **)&jpara) = (VideoInputParam *) para; 
    jenv->CallStaticVoidMethod(Swig::jclass_AS_Native_PlayerJNI, Swig::director_methids[3], swigjobj, jpara);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ASVideoInputEvent::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "videoOpened", "(Lcom/asnetwork/swig/VideoInputParam;)V", NULL 
    },
    {
      "videoStarted", "(Lcom/asnetwork/swig/VideoInputParam;)V", NULL 
    },
    {
      "videoStopped", "(Lcom/asnetwork/swig/VideoInputParam;)V", NULL 
    },
    {
      "videoClosed", "(Lcom/asnetwork/swig/VideoInputParam;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/asnetwork/swig/ASVideoInputEvent");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ASVideoInput::SwigDirector_ASVideoInput(JNIEnv *jenv) : ASVideoInput(), Swig::Director(jenv) {
}

SwigDirector_ASVideoInput::~SwigDirector_ASVideoInput() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


int SwigDirector_ASVideoInput::videoOpen(char *url, VIDEO_SOURCE srcType) {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jurl = 0 ;
  jint jsrcType  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ASVideoInput::videoOpen.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jurl = 0;
    if (url) {
      jurl = jenv->NewStringUTF((const char *)url);
      if (!jurl) return c_result;
    }
    jsrcType = (jint) srcType;
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_AS_Native_PlayerJNI, Swig::director_methids[4], swigjobj, jurl, jsrcType);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int SwigDirector_ASVideoInput::videoStart(VideoInputParam *para) {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpara = 0 ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ASVideoInput::videoStart.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((VideoInputParam **)&jpara) = (VideoInputParam *) para; 
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_AS_Native_PlayerJNI, Swig::director_methids[5], swigjobj, jpara);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int SwigDirector_ASVideoInput::videoStop() {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ASVideoInput::videoStop.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_AS_Native_PlayerJNI, Swig::director_methids[6], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int SwigDirector_ASVideoInput::videoClose() {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ASVideoInput::videoClose.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_AS_Native_PlayerJNI, Swig::director_methids[7], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ASVideoInput::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "videoOpen", "(Ljava/lang/String;Lcom/asnetwork/swig/VIDEO_SOURCE;)I", NULL 
    },
    {
      "videoStart", "(Lcom/asnetwork/swig/VideoInputParam;)I", NULL 
    },
    {
      "videoStop", "()I", NULL 
    },
    {
      "videoClose", "()I", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/asnetwork/swig/ASVideoInput");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ASNativePlayer::SwigDirector_ASNativePlayer(JNIEnv *jenv) : ASNativePlayer(), Swig::Director(jenv) {
}

SwigDirector_ASNativePlayer::~SwigDirector_ASNativePlayer() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ASNativePlayer::videoOpened(VideoInputParam *para) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpara = 0 ;
  
  if (!swig_override[0]) {
    ASNativePlayer::videoOpened(para);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((VideoInputParam **)&jpara) = (VideoInputParam *) para; 
    jenv->CallStaticVoidMethod(Swig::jclass_AS_Native_PlayerJNI, Swig::director_methids[8], swigjobj, jpara);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ASNativePlayer::videoStarted(VideoInputParam *para) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpara = 0 ;
  
  if (!swig_override[1]) {
    ASNativePlayer::videoStarted(para);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((VideoInputParam **)&jpara) = (VideoInputParam *) para; 
    jenv->CallStaticVoidMethod(Swig::jclass_AS_Native_PlayerJNI, Swig::director_methids[9], swigjobj, jpara);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ASNativePlayer::videoStopped(VideoInputParam *para) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpara = 0 ;
  
  if (!swig_override[2]) {
    ASNativePlayer::videoStopped(para);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((VideoInputParam **)&jpara) = (VideoInputParam *) para; 
    jenv->CallStaticVoidMethod(Swig::jclass_AS_Native_PlayerJNI, Swig::director_methids[10], swigjobj, jpara);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ASNativePlayer::videoClosed(VideoInputParam *para) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpara = 0 ;
  
  if (!swig_override[3]) {
    ASNativePlayer::videoClosed(para);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((VideoInputParam **)&jpara) = (VideoInputParam *) para; 
    jenv->CallStaticVoidMethod(Swig::jclass_AS_Native_PlayerJNI, Swig::director_methids[11], swigjobj, jpara);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ASNativePlayer::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "videoOpened", "(Lcom/asnetwork/swig/VideoInputParam;)V", NULL 
    },
    {
      "videoStarted", "(Lcom/asnetwork/swig/VideoInputParam;)V", NULL 
    },
    {
      "videoStopped", "(Lcom/asnetwork/swig/VideoInputParam;)V", NULL 
    },
    {
      "videoClosed", "(Lcom/asnetwork/swig/VideoInputParam;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/asnetwork/swig/ASNativePlayer");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_new_1ucArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  ucArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (ucArray *)new_ucArray(arg1);
  *(ucArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_delete_1ucArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ucArray *arg1 = (ucArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ucArray **)&jarg1; 
  delete_ucArray(arg1);
}


SWIGEXPORT jshort JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ucArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jshort jresult = 0 ;
  ucArray *arg1 = (ucArray *) 0 ;
  int arg2 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ucArray **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (unsigned char)ucArray_getitem(arg1,arg2);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ucArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  ucArray *arg1 = (ucArray *) 0 ;
  int arg2 ;
  unsigned char arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ucArray **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char)jarg3; 
  ucArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ucArray_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ucArray *arg1 = (ucArray *) 0 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ucArray **)&jarg1; 
  result = (unsigned char *)ucArray_cast(arg1);
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ucArray_1frompointer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned char *arg1 = (unsigned char *) 0 ;
  ucArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned char **)&jarg1; 
  result = (ucArray *)ucArray_frompointer(arg1);
  *(ucArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_VideoInputParam_1src_1width_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  VideoInputParam *arg1 = (VideoInputParam *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoInputParam **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->src_width = arg2;
}


SWIGEXPORT jint JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_VideoInputParam_1src_1width_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  VideoInputParam *arg1 = (VideoInputParam *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoInputParam **)&jarg1; 
  result = (int) ((arg1)->src_width);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_VideoInputParam_1src_1height_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  VideoInputParam *arg1 = (VideoInputParam *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoInputParam **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->src_height = arg2;
}


SWIGEXPORT jint JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_VideoInputParam_1src_1height_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  VideoInputParam *arg1 = (VideoInputParam *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoInputParam **)&jarg1; 
  result = (int) ((arg1)->src_height);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_VideoInputParam_1dest_1width_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  VideoInputParam *arg1 = (VideoInputParam *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoInputParam **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->dest_width = arg2;
}


SWIGEXPORT jint JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_VideoInputParam_1dest_1width_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  VideoInputParam *arg1 = (VideoInputParam *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoInputParam **)&jarg1; 
  result = (int) ((arg1)->dest_width);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_VideoInputParam_1dest_1height_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  VideoInputParam *arg1 = (VideoInputParam *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoInputParam **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->dest_height = arg2;
}


SWIGEXPORT jint JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_VideoInputParam_1dest_1height_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  VideoInputParam *arg1 = (VideoInputParam *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoInputParam **)&jarg1; 
  result = (int) ((arg1)->dest_height);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_VideoInputParam_1colorSpaceType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  VideoInputParam *arg1 = (VideoInputParam *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoInputParam **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->colorSpaceType = arg2;
}


SWIGEXPORT jint JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_VideoInputParam_1colorSpaceType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  VideoInputParam *arg1 = (VideoInputParam *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoInputParam **)&jarg1; 
  result = (int) ((arg1)->colorSpaceType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_VideoInputParam_1currentState_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  VideoInputParam *arg1 = (VideoInputParam *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoInputParam **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->currentState = arg2;
}


SWIGEXPORT jint JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_VideoInputParam_1currentState_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  VideoInputParam *arg1 = (VideoInputParam *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoInputParam **)&jarg1; 
  result = (int) ((arg1)->currentState);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_VideoInputParam_1currentActionState_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  VideoInputParam *arg1 = (VideoInputParam *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoInputParam **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->currentActionState = arg2;
}


SWIGEXPORT jint JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_VideoInputParam_1currentActionState_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  VideoInputParam *arg1 = (VideoInputParam *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoInputParam **)&jarg1; 
  result = (int) ((arg1)->currentActionState);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_VideoInputParam_1nextAction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  VideoInputParam *arg1 = (VideoInputParam *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoInputParam **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nextAction = arg2;
}


SWIGEXPORT jint JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_VideoInputParam_1nextAction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  VideoInputParam *arg1 = (VideoInputParam *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoInputParam **)&jarg1; 
  result = (int) ((arg1)->nextAction);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_VideoInputParam_1decodeProcess_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  VideoInputParam *arg1 = (VideoInputParam *) 0 ;
  ASVideoDecodeProcess *arg2 = (ASVideoDecodeProcess *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoInputParam **)&jarg1; 
  arg2 = *(ASVideoDecodeProcess **)&jarg2; 
  if (arg1) (arg1)->decodeProcess = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_VideoInputParam_1decodeProcess_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  VideoInputParam *arg1 = (VideoInputParam *) 0 ;
  ASVideoDecodeProcess *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoInputParam **)&jarg1; 
  result = (ASVideoDecodeProcess *) ((arg1)->decodeProcess);
  *(ASVideoDecodeProcess **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_VideoInputParam_1fileSource_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  VideoInputParam *arg1 = (VideoInputParam *) 0 ;
  ASMediaFileSource *arg2 = (ASMediaFileSource *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoInputParam **)&jarg1; 
  arg2 = *(ASMediaFileSource **)&jarg2; 
  if (arg1) (arg1)->fileSource = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_VideoInputParam_1fileSource_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  VideoInputParam *arg1 = (VideoInputParam *) 0 ;
  ASMediaFileSource *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoInputParam **)&jarg1; 
  result = (ASMediaFileSource *) ((arg1)->fileSource);
  *(ASMediaFileSource **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_VideoInputParam_1videoState_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  VideoInputParam *arg1 = (VideoInputParam *) 0 ;
  pVideoState arg2 ;
  pVideoState *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoInputParam **)&jarg1; 
  argp2 = *(pVideoState **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null pVideoState");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->videoState = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_VideoInputParam_1videoState_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  VideoInputParam *arg1 = (VideoInputParam *) 0 ;
  pVideoState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoInputParam **)&jarg1; 
  result =  ((arg1)->videoState);
  *(pVideoState **)&jresult = new pVideoState((const pVideoState &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_new_1VideoInputParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  VideoInputParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (VideoInputParam *)new VideoInputParam();
  *(VideoInputParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_delete_1VideoInputParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  VideoInputParam *arg1 = (VideoInputParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(VideoInputParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_new_1ASVideoInputEvent(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ASVideoInputEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ASVideoInputEvent *)new SwigDirector_ASVideoInputEvent(jenv);
  *(ASVideoInputEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_delete_1ASVideoInputEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ASVideoInputEvent *arg1 = (ASVideoInputEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ASVideoInputEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASVideoInputEvent_1videoOpened(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ASVideoInputEvent *arg1 = (ASVideoInputEvent *) 0 ;
  VideoInputParam *arg2 = (VideoInputParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASVideoInputEvent **)&jarg1; 
  arg2 = *(VideoInputParam **)&jarg2; 
  (arg1)->videoOpened(arg2);
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASVideoInputEvent_1videoStarted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ASVideoInputEvent *arg1 = (ASVideoInputEvent *) 0 ;
  VideoInputParam *arg2 = (VideoInputParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASVideoInputEvent **)&jarg1; 
  arg2 = *(VideoInputParam **)&jarg2; 
  (arg1)->videoStarted(arg2);
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASVideoInputEvent_1videoStopped(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ASVideoInputEvent *arg1 = (ASVideoInputEvent *) 0 ;
  VideoInputParam *arg2 = (VideoInputParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASVideoInputEvent **)&jarg1; 
  arg2 = *(VideoInputParam **)&jarg2; 
  (arg1)->videoStopped(arg2);
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASVideoInputEvent_1videoClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ASVideoInputEvent *arg1 = (ASVideoInputEvent *) 0 ;
  VideoInputParam *arg2 = (VideoInputParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASVideoInputEvent **)&jarg1; 
  arg2 = *(VideoInputParam **)&jarg2; 
  (arg1)->videoClosed(arg2);
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASVideoInputEvent_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  ASVideoInputEvent *obj = *((ASVideoInputEvent **)&objarg);
  (void)jcls;
  SwigDirector_ASVideoInputEvent *director = dynamic_cast<SwigDirector_ASVideoInputEvent *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASVideoInputEvent_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  ASVideoInputEvent *obj = *((ASVideoInputEvent **)&objarg);
  SwigDirector_ASVideoInputEvent *director = dynamic_cast<SwigDirector_ASVideoInputEvent *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_new_1ASVideoInput(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ASVideoInput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ASVideoInput *)new SwigDirector_ASVideoInput(jenv);
  *(ASVideoInput **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_delete_1ASVideoInput(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ASVideoInput *arg1 = (ASVideoInput *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ASVideoInput **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASVideoInput_1videoOpen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  ASVideoInput *arg1 = (ASVideoInput *) 0 ;
  char *arg2 = (char *) 0 ;
  VIDEO_SOURCE arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASVideoInput **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (VIDEO_SOURCE)jarg3; 
  result = (int)(arg1)->videoOpen(arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASVideoInput_1videoStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  ASVideoInput *arg1 = (ASVideoInput *) 0 ;
  VideoInputParam *arg2 = (VideoInputParam *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASVideoInput **)&jarg1; 
  arg2 = *(VideoInputParam **)&jarg2; 
  result = (int)(arg1)->videoStart(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASVideoInput_1videoStop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ASVideoInput *arg1 = (ASVideoInput *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASVideoInput **)&jarg1; 
  result = (int)(arg1)->videoStop();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASVideoInput_1videoClose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ASVideoInput *arg1 = (ASVideoInput *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASVideoInput **)&jarg1; 
  result = (int)(arg1)->videoClose();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASVideoInput_1setEventCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ASVideoInput *arg1 = (ASVideoInput *) 0 ;
  ASVideoInputEvent *arg2 = (ASVideoInputEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASVideoInput **)&jarg1; 
  arg2 = *(ASVideoInputEvent **)&jarg2; 
  (arg1)->setEventCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASVideoInput_1pEventCB_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ASVideoInput *arg1 = (ASVideoInput *) 0 ;
  ASVideoInputEvent *arg2 = (ASVideoInputEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASVideoInput **)&jarg1; 
  arg2 = *(ASVideoInputEvent **)&jarg2; 
  if (arg1) (arg1)->pEventCB = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASVideoInput_1pEventCB_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ASVideoInput *arg1 = (ASVideoInput *) 0 ;
  ASVideoInputEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASVideoInput **)&jarg1; 
  result = (ASVideoInputEvent *) ((arg1)->pEventCB);
  *(ASVideoInputEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASVideoInput_1innerParam_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ASVideoInput *arg1 = (ASVideoInput *) 0 ;
  VideoInputParam *arg2 = (VideoInputParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASVideoInput **)&jarg1; 
  arg2 = *(VideoInputParam **)&jarg2; 
  if (arg1) (arg1)->innerParam = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASVideoInput_1innerParam_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ASVideoInput *arg1 = (ASVideoInput *) 0 ;
  VideoInputParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASVideoInput **)&jarg1; 
  result = (VideoInputParam *)& ((arg1)->innerParam);
  *(VideoInputParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASVideoInput_1isStart_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ASVideoInput *arg1 = (ASVideoInput *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASVideoInput **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isStart = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASVideoInput_1isStart_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASVideoInput *arg1 = (ASVideoInput *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASVideoInput **)&jarg1; 
  result = (bool) ((arg1)->isStart);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASVideoInput_1isOpen_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ASVideoInput *arg1 = (ASVideoInput *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASVideoInput **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isOpen = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASVideoInput_1isOpen_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ASVideoInput *arg1 = (ASVideoInput *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASVideoInput **)&jarg1; 
  result = (bool) ((arg1)->isOpen);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASVideoInput_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  ASVideoInput *obj = *((ASVideoInput **)&objarg);
  (void)jcls;
  SwigDirector_ASVideoInput *director = dynamic_cast<SwigDirector_ASVideoInput *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASVideoInput_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  ASVideoInput *obj = *((ASVideoInput **)&objarg);
  SwigDirector_ASVideoInput *director = dynamic_cast<SwigDirector_ASVideoInput *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASNativePlayer_1createNewInstance(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ASNativePlayer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ASNativePlayer *)ASNativePlayer::createNewInstance();
  *(ASNativePlayer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASNativePlayer_1getInstance(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ASNativePlayer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ASNativePlayer *)ASNativePlayer::getInstance();
  *(ASNativePlayer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASNativePlayer_1releaseInstance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ASNativePlayer *arg1 = (ASNativePlayer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASNativePlayer **)&jarg1; 
  ASNativePlayer::releaseInstance(arg1);
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASNativePlayer_1releaseInstance_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  ASNativePlayer::releaseInstance();
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASNativePlayer_1g_1instance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ASNativePlayer *arg1 = (ASNativePlayer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASNativePlayer **)&jarg1; 
  ASNativePlayer::g_instance = arg1;
}


SWIGEXPORT jlong JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASNativePlayer_1g_1instance_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ASNativePlayer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ASNativePlayer *)ASNativePlayer::g_instance;
  *(ASNativePlayer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_new_1ASNativePlayer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ASNativePlayer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ASNativePlayer *)new SwigDirector_ASNativePlayer(jenv);
  *(ASNativePlayer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_delete_1ASNativePlayer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ASNativePlayer *arg1 = (ASNativePlayer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ASNativePlayer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASNativePlayer_1playVideo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ASNativePlayer *arg1 = (ASNativePlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASNativePlayer **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->playVideo(arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASNativePlayer_1stopVideo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ASNativePlayer *arg1 = (ASNativePlayer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASNativePlayer **)&jarg1; 
  result = (int)(arg1)->stopVideo();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASNativePlayer_1videoOpened(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ASNativePlayer *arg1 = (ASNativePlayer *) 0 ;
  VideoInputParam *arg2 = (VideoInputParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASNativePlayer **)&jarg1; 
  arg2 = *(VideoInputParam **)&jarg2; 
  (arg1)->videoOpened(arg2);
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASNativePlayer_1videoOpenedSwigExplicitASNativePlayer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ASNativePlayer *arg1 = (ASNativePlayer *) 0 ;
  VideoInputParam *arg2 = (VideoInputParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASNativePlayer **)&jarg1; 
  arg2 = *(VideoInputParam **)&jarg2; 
  (arg1)->ASNativePlayer::videoOpened(arg2);
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASNativePlayer_1videoStarted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ASNativePlayer *arg1 = (ASNativePlayer *) 0 ;
  VideoInputParam *arg2 = (VideoInputParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASNativePlayer **)&jarg1; 
  arg2 = *(VideoInputParam **)&jarg2; 
  (arg1)->videoStarted(arg2);
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASNativePlayer_1videoStartedSwigExplicitASNativePlayer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ASNativePlayer *arg1 = (ASNativePlayer *) 0 ;
  VideoInputParam *arg2 = (VideoInputParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASNativePlayer **)&jarg1; 
  arg2 = *(VideoInputParam **)&jarg2; 
  (arg1)->ASNativePlayer::videoStarted(arg2);
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASNativePlayer_1videoStopped(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ASNativePlayer *arg1 = (ASNativePlayer *) 0 ;
  VideoInputParam *arg2 = (VideoInputParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASNativePlayer **)&jarg1; 
  arg2 = *(VideoInputParam **)&jarg2; 
  (arg1)->videoStopped(arg2);
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASNativePlayer_1videoStoppedSwigExplicitASNativePlayer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ASNativePlayer *arg1 = (ASNativePlayer *) 0 ;
  VideoInputParam *arg2 = (VideoInputParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASNativePlayer **)&jarg1; 
  arg2 = *(VideoInputParam **)&jarg2; 
  (arg1)->ASNativePlayer::videoStopped(arg2);
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASNativePlayer_1videoClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ASNativePlayer *arg1 = (ASNativePlayer *) 0 ;
  VideoInputParam *arg2 = (VideoInputParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASNativePlayer **)&jarg1; 
  arg2 = *(VideoInputParam **)&jarg2; 
  (arg1)->videoClosed(arg2);
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASNativePlayer_1videoClosedSwigExplicitASNativePlayer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ASNativePlayer *arg1 = (ASNativePlayer *) 0 ;
  VideoInputParam *arg2 = (VideoInputParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ASNativePlayer **)&jarg1; 
  arg2 = *(VideoInputParam **)&jarg2; 
  (arg1)->ASNativePlayer::videoClosed(arg2);
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASNativePlayer_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ASNativePlayer *arg1 = (ASNativePlayer *) 0 ;
  ASPlayState arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASNativePlayer **)&jarg1; 
  arg2 = (ASPlayState)jarg2; 
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT jint JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASNativePlayer_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ASNativePlayer *arg1 = (ASNativePlayer *) 0 ;
  ASPlayState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASNativePlayer **)&jarg1; 
  result = (ASPlayState) ((arg1)->state);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASNativePlayer_1filename_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ASNativePlayer *arg1 = (ASNativePlayer *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASNativePlayer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->filename = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASNativePlayer_1filename_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ASNativePlayer *arg1 = (ASNativePlayer *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ASNativePlayer **)&jarg1; 
  result = (std::string *) & ((arg1)->filename);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASNativePlayer_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  ASNativePlayer *obj = *((ASNativePlayer **)&objarg);
  (void)jcls;
  SwigDirector_ASNativePlayer *director = dynamic_cast<SwigDirector_ASNativePlayer *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASNativePlayer_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  ASNativePlayer *obj = *((ASNativePlayer **)&objarg);
  SwigDirector_ASNativePlayer *director = dynamic_cast<SwigDirector_ASNativePlayer *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_ASNativePlayer_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ASVideoInputEvent **)&baseptr = *(ASNativePlayer **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_com_asnetwork_swig_AS_1Native_1PlayerJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[12] = {
    {
      "SwigDirector_ASVideoInputEvent_videoOpened", "(Lcom/asnetwork/swig/ASVideoInputEvent;J)V" 
    },
    {
      "SwigDirector_ASVideoInputEvent_videoStarted", "(Lcom/asnetwork/swig/ASVideoInputEvent;J)V" 
    },
    {
      "SwigDirector_ASVideoInputEvent_videoStopped", "(Lcom/asnetwork/swig/ASVideoInputEvent;J)V" 
    },
    {
      "SwigDirector_ASVideoInputEvent_videoClosed", "(Lcom/asnetwork/swig/ASVideoInputEvent;J)V" 
    },
    {
      "SwigDirector_ASVideoInput_videoOpen", "(Lcom/asnetwork/swig/ASVideoInput;Ljava/lang/String;I)I" 
    },
    {
      "SwigDirector_ASVideoInput_videoStart", "(Lcom/asnetwork/swig/ASVideoInput;J)I" 
    },
    {
      "SwigDirector_ASVideoInput_videoStop", "(Lcom/asnetwork/swig/ASVideoInput;)I" 
    },
    {
      "SwigDirector_ASVideoInput_videoClose", "(Lcom/asnetwork/swig/ASVideoInput;)I" 
    },
    {
      "SwigDirector_ASNativePlayer_videoOpened", "(Lcom/asnetwork/swig/ASNativePlayer;J)V" 
    },
    {
      "SwigDirector_ASNativePlayer_videoStarted", "(Lcom/asnetwork/swig/ASNativePlayer;J)V" 
    },
    {
      "SwigDirector_ASNativePlayer_videoStopped", "(Lcom/asnetwork/swig/ASNativePlayer;J)V" 
    },
    {
      "SwigDirector_ASNativePlayer_videoClosed", "(Lcom/asnetwork/swig/ASNativePlayer;J)V" 
    }
  };
  Swig::jclass_AS_Native_PlayerJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_AS_Native_PlayerJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_methids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_methids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

JavaVM* g_cached_jvm = NULL;
JNIEnv* g_cached_env = NULL;

jint JNI_OnLoad(JavaVM *vm, void *reserved)
{
  g_cached_jvm = vm;
  if (vm->GetEnv((void**)&g_cached_env, JNI_VERSION_1_6) != JNI_OK) {
    return -1;
  }
  return JNI_VERSION_1_6;
}

JavaVM* JNI_GetVM()
{
  return g_cached_jvm;
}

JNIEnv* JNI_GetEnv()
{
  return g_cached_env;
}


